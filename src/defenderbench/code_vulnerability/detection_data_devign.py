import os
import json
import logging
import itertools
from os.path import join as pjoin
from typing import Optional

from datasets import load_dataset

from defenderbench.config import DEFENDERBENCH_CACHE_HOME, DEFENDERBENCH_FORCE_DOWNLOAD
from defenderbench.utils import take

# Sources:
# https://sites.google.com/view/devign
# https://huggingface.co/datasets/semeru/code-code-DefectDetection
HG_CODE_X_GLUE_DEFECT_DETECTION = "semeru/code-code-DefectDetection"
DEFENDERBENCH_CACHE_CODE_VULNERABILITY = pjoin(DEFENDERBENCH_CACHE_HOME, "code_vulnerability_devign")

DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TRAIN = pjoin(DEFENDERBENCH_CACHE_CODE_VULNERABILITY, "train.json")
DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TEST = pjoin(DEFENDERBENCH_CACHE_CODE_VULNERABILITY, "test.json")


def remap_labels(dataset):
    return [
        {"content": item["func"], "label": "non-vulnerable" if item["target"] == 0 else "vulnerable"}
        for item in dataset
    ]


def prepare_data(force=DEFENDERBENCH_FORCE_DOWNLOAD):
    all_files_exist = (
        os.path.exists(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TRAIN)
        and os.path.exists(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TEST)
    )
    if all_files_exist and not force:
        return

    os.makedirs(DEFENDERBENCH_CACHE_CODE_VULNERABILITY, exist_ok=True)

    # Fetch the dataset from Hugging Face
    ds = load_dataset(HG_CODE_X_GLUE_DEFECT_DETECTION)
    ds = ds.shuffle(seed=20240730)

    logging.info(f"CodeVulnerabilityDevignDetection: train|test splits: {len(ds['train'])}|{len(ds['test'])}")

    subset_test_data = remap_labels(ds["test"])[:500]
    logging.info(f"CodeVulnerabilityDevignDetection: Total test subset: {len(subset_test_data)}")

    with open(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TEST, "w") as f:
        json.dump(subset_test_data, f, indent=2)

    # Downsample the train data while keeping the classes balanced.
    positive_data = (item for item in ds["train"] if item["target"] == 1)
    negative_data = (item for item in ds["train"] if item["target"] == 0)

    subset_train_data = itertools.chain.from_iterable(zip(take(10, positive_data), take(10, negative_data)))
    subset_train_data = remap_labels(subset_train_data)
    logging.info(f"CodeVulnerabilityDevign: Total train subset: {len(subset_train_data)}")

    with open(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TRAIN, "w") as f:
        json.dump(subset_train_data, f, indent=2)


def get(name, limit: Optional[int] = None):
    prepare_data()  # make sure the data is ready

    if name == "train":
        return json.load(open(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TRAIN))
    elif name == "test":
        data = json.load(open(DEFENDERBENCH_CACHE_CODE_VULNERABILITY_TEST))
        return data[:limit] if limit else data
    else:
        raise ValueError(f"Invalid data name: {name} for CodeVulnerabilityDevign environment.")
